from typing import Union

from django import forms
from django.contrib import admin, messages
from django.http import HttpRequest
from django.shortcuts import redirect, render, get_object_or_404
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

from import_export.admin import ExportActionModelAdmin
from simple_history.admin import SimpleHistoryAdmin
from unfold.contrib.filters.admin import RangeDateTimeFilter, ChoicesDropdownFilter, RelatedDropdownFilter
from unfold.contrib.import_export.forms import ExportForm
from unfold.decorators import action

from common.admin import BaseModelAdmin
from ..models import Request, ROLE_SPECIALIST, ROLE_DIRECTOR, ROLE_CHAIRMAN, ROLE_ACCOUNTANT
from ..resources import RequestResource
from ..services.notifications import notify_status_change


@admin.register(Request)
class RequestAdmin(SimpleHistoryAdmin, BaseModelAdmin, ExportActionModelAdmin):
    list_display = (
        'id',
        'full_name_or_org',
        'subject_type',
        'request_type',
        'requested_amount',
        'status',
        'created_at',
        'detail_link'
    )
    list_filter = (
        'subject_type',
        ('status', ChoicesDropdownFilter),
        ('request_type', RelatedDropdownFilter),
        ('created_at', RangeDateTimeFilter)
    )
    actions_detail = [
        "approve_specialist",
        "reject_specialist",
        "approve_director",
        "reject_director",
        'send_to_chairman',
        "approve_chairman",
        "reject_chairman",
        "mark_as_awaiting_payment",
        "mark_as_paid",
    ]
    history_list_display = ["status"]

    list_filter_submit = True
    search_fields = ('full_name_or_org', 'phone_number', 'description')
    readonly_fields = ('created_at', 'updated_at')
    date_hierarchy = 'created_at'
    ordering = ('-created_at',)
    list_per_page = 25

    export_form_class = ExportForm
    resource_class = RequestResource

    list_select_related = ('request_type',)

    fieldsets = (
        (None, {
            'fields': (
                'subject_type', 'full_name_or_org', 'phone_number',
                'actual_address', 'registration_address',
                'description', 'request_type', 'status',
            )
        }),
        ("–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            'fields': (
                'requisites',
                'requested_amount',
                'approved_amount_director',
                'approved_amount_chairman',
            )
        }),
        ("–î–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≤–ª–æ–∂–µ–Ω–∏—è", {
            'fields': (
                'incoming_letter', 'attachments',
            )
        }),
        ("–°–ª—É–∂–µ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", {
            'fields': (
                'created_at',
                'updated_at',
            )
        }),
    )

    def get_readonly_fields(self, request, obj=None):
        if request.user.is_superuser:
            return self.readonly_fields

        base_fields = [
            'subject_type',
            'full_name_or_org',
            'phone_number',
            'actual_address',
            'registration_address',
            'description',
            'incoming_letter',
            'requisites',
            'requested_amount',
            'request_type',
            'status',
            'created_at',
            'updated_at',
            'attachments',
        ]

        if request.user.role in (ROLE_SPECIALIST, ROLE_ACCOUNTANT):
            return base_fields + ['approved_amount_director', 'approved_amount_chairman']
        elif request.user.role == ROLE_DIRECTOR:
            return base_fields + ['approved_amount_chairman']
        elif request.user.role == ROLE_CHAIRMAN:  # –ü—Ä–∏–º–µ—Ä –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–Ω—É —Ä–æ–ª—å
            return base_fields + ['approved_amount_director']

        return base_fields  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã–µ –ø–æ–ª—è

    @action(
        description=_("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)"),
        url_path="approve-specialist",
        permissions=["approve_specialist"],
    )
    def approve_specialist(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'approved_by_specialist'
        obj.save()
        notify_status_change(role=ROLE_DIRECTOR, request_obj=obj, new_status=obj.get_status_display())
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_approve_specialist_permission(self, request: HttpRequest, object_id: Union[str, int]) -> bool:
        return request.user.role == ROLE_SPECIALIST

    @action(
        description=_("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç)"),
        url_path="reject-specialist",
        permissions=["reject_specialist"],
    )
    def reject_specialist(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'rejected_by_specialist'
        obj.save()
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_reject_specialist_permission(self, request: HttpRequest, object_id: Union[str, int]) -> bool:
        return request.user.role == ROLE_SPECIALIST

    # ==== –î–ò–†–ï–ö–¢–û–† ====

    # @action(
    #     description=_("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (–î–∏—Ä–µ–∫—Ç–æ—Ä)"),
    #     url_path="approve-director",
    #     permissions=["approve_director"],
    # )
    # def approve_director(self, request, object_id):
    #     obj = get_object_or_404(Request, pk=object_id)  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É –º–æ–¥–µ–ª—å
    #
    #     class ApproveDirectorForm(forms.Form):
    #         approved_amount_director = forms.DecimalField(
    #             label=_("–°—É–º–º–∞, —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º"),
    #             min_value=0,
    #             decimal_places=2,
    #             max_digits=12,
    #             widget=UnfoldAdminTextInputWidget(attrs={"placeholder": _("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")}),
    #         )
    #
    #         class Media:
    #             js = [
    #                 "admin/js/vendor/jquery/jquery.js",
    #                 "admin/js/jquery.init.js",
    #                 "admin/js/calendar.js",
    #                 "admin/js/admin/DateTimeShortcuts.js",
    #                 "admin/js/core.js",
    #             ]
    #
    #     form = ApproveDirectorForm(request.POST or None)
    #
    #     if request.method == "POST" and form.is_valid():
    #         # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
    #         obj.approved_amount_director = form.cleaned_data["approved_amount_director"]
    #         obj.status = "approved_by_director"
    #         # –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ –ø–æ–ª–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    #         # obj.director_comment = form.cleaned_data["comment"]
    #         obj.save(update_fields=["approved_amount_director", "status"])
    #
    #         messages.success(request, _("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º –∏ —Å—É–º–º–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."))
    #         return redirect(reverse_lazy("admin:crm_request_change", args=[obj.pk]))
    #
    #     return render(
    #         request,
    #         "crm/director_approve_form.html",  # —à–∞–±–ª–æ–Ω —Ñ–æ—Ä–º—ã
    #         {
    #             "form": form,
    #             "object": obj,
    #             "title": _("–û–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º"),
    #             **self.admin_site.each_context(request),
    #         },
    #     )

    @action(
        description=_("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (–î–∏—Ä–µ–∫—Ç–æ—Ä)"),
        url_path="approve-director",
        permissions=["approve_director"],
    )
    def approve_director(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'approved_by_director'
        obj.save()
        notify_status_change(role=ROLE_ACCOUNTANT, request_obj=obj, new_status=obj.get_status_display())
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_approve_director_permission(self, request, object_id=None):
        return request.user.role == ROLE_DIRECTOR

    @action(
        description=_("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (–î–∏—Ä–µ–∫—Ç–æ—Ä)"),
        url_path="reject-director",
        permissions=["reject_director"],
    )
    def reject_director(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'rejected_by_director'
        obj.save()
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–æ–º."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_reject_director_permission(self, request, object_id=None):
        return request.user.role == ROLE_DIRECTOR

    @action(
        description=_("üì® –ù–∞–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é"),
        url_path="send-to-chairman",
        permissions=["send_to_chairman"],
    )
    def send_to_chairman(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'sent_to_chairman'
        obj.save()
        notify_status_change(role=ROLE_CHAIRMAN, request_obj=obj, new_status=obj.get_status_display())
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—é."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_send_to_chairman_permission(self, request, object_id=None):
        return request.user.role == ROLE_DIRECTOR

    # ==== –ü–†–ï–î–°–ï–î–ê–¢–ï–õ–¨ ====

    @action(
        description=_("‚úÖ –û–¥–æ–±—Ä–∏—Ç—å (–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å)"),
        url_path="approve-chairman",
        permissions=["approve_chairman"],
    )
    def approve_chairman(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'approved_by_chairman'
        obj.save()
        notify_status_change(role=ROLE_ACCOUNTANT, request_obj=obj, new_status=obj.get_status_display())
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–º."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_approve_chairman_permission(self, request, object_id=None):
        return request.user.role == ROLE_CHAIRMAN

    @action(
        description=_("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å (–ü—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª—å)"),
        url_path="reject-chairman",
        permissions=["reject_chairman"],
    )
    def reject_chairman(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'rejected_by_chairman'
        obj.save()
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –ø—Ä–µ–¥—Å–µ–¥–∞—Ç–µ–ª–µ–º."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_reject_chairman_permission(self, request, object_id=None):
        return request.user.role == ROLE_CHAIRMAN

    # ==== –ë–£–•–ì–ê–õ–¢–ï–† ====

    @action(
        description=_("üí∞ –í—ã–ø–ª–∞—á–µ–Ω–æ"),
        url_path="mark-paid",
        permissions=["mark_as_paid"],
    )
    def mark_as_paid(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'paid'
        obj.save()
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –≤—ã–ø–ª–∞—á–µ–Ω–∞."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_mark_as_paid_permission(self, request, object_id=None):
        return request.user.role == ROLE_ACCOUNTANT

    @action(
        description=_("‚è≥ –û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã"),
        url_path="mark-awaiting-payment",
        permissions=["mark_as_awaiting_payment"],
    )
    def mark_as_awaiting_payment(self, request: HttpRequest, object_id: int):
        obj = self.model.objects.get(pk=object_id)
        obj.status = 'awaiting_payment'
        obj.save()
        messages.success(request, _("–ó–∞—è–≤–∫–∞ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ '–û–∂–∏–¥–∞–µ—Ç –≤—ã–ø–ª–∞—Ç—ã'."))
        return redirect(reverse_lazy("admin:crm_request_change", args=[object_id]))

    def has_mark_as_awaiting_payment_permission(self, request, object_id=None):
        return request.user.role == ROLE_ACCOUNTANT